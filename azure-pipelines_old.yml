# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
pool:
  vmImage: 'Ubuntu 20.04'

variables:
- template: Variables.yml
- name: PIPELINE_ORG
  value: Azure
- name: PIPELINE_REPO
  value: depth-coverage-pipeline
- name: PULL_NUMBER
  value: $(System.PullRequest.PullRequestNumber)
- name: ResourceProvider
  value: empty
- name: Resource
  value: ""
- name: ResourceMapJson
  value: ""
- name: RESOURCE_MAP_FILE
  value: ToGenerate.json
- name: README_FILE
  value: ""
- name: TARGET
  value: clicore
- name: OnboardType
  value: depth
- name: AlertInstruction
  value: ""
- name: NotifyUsers
  value: ""
- name: Artifcact
  value: ""
- name: CODE_PULLREQUEST
  value: ""
- name: Task_Result
  value: "success"
- name: CODEGEN_TO_SDK_CONFIG
  value: codegen_to_sdk_config.json
- name: CHECK_OUT
  value: false
stages:
- template: .azure-pipelines/templates/Setup.yml
- stage: GenerateCode
  dependsOn: setup
  condition: succeeded()
  jobs:
  - job: GenerateJob
    variables:
      TASK_KEY: GenerateCode
      Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
    steps:
    - template: .azure-pipelines/templates/BeforeTask.yml
      parameters:
        checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
        SDK: ${{ variables.SDK }}
    - template: .azure-pipelines/templates/GenerateCode.yml
    - template: .azure-pipelines/templates/AfterTask.yml
      parameters:
        publishArtifact: true
        checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
  - job: CodeGenerationFailureAlert
    condition: failed()
    variables:
      TASK_KEY: CodeGenerationnFailureAlert
      Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
    steps:
    - template: .azure-pipelines/templates/VariableSetTask.yml
    - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'Build') }}:
  - stage: Build
    dependsOn: GenerateCode
    # condition: and(succeeded(), eq(stageDependencies.GenerateCode.outputs['GenerateJob.DetermineResult.tobuild'], 'Yes'))
    jobs:
    - job: build
      variables:
        TASK_KEY: Build
        Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
      steps:
      - template: .azure-pipelines/templates/BeforeTask.yml
        parameters:
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
          SDK: ${{ variables.SDK }}
      - template: .azure-pipelines/templates/Build.yml
      - template: .azure-pipelines/templates/AfterTask.yml
        parameters:
          publishArtifact: true
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
    - job: BuildFailureAlert
      dependsOn: build
      condition: failed()
      variables:
        TASK_KEY: BuildFailureAlert
        Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'MockTest') }}:
  - stage: MockTest
    dependsOn:
    - setup
    - GenerateCode
    - ${{ if contains(variables['stages'],'Build') }}:
      - Build
    condition: and (not(contains(stageDependencies.setup.outputs['config.configResource.excludestages'], 'MockTest')), succeeded())
    jobs:
    - job: MockTestJob
      variables:
        TASK_KEY: MockTest
        Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
      steps:
      - template: .azure-pipelines/templates/BeforeTask.yml
        parameters:
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
          SDK: ${{ variables.SDK }}
      - template: .azure-pipelines/templates/MockTest.yml
      - template: .azure-pipelines/templates/AfterTask.yml
        parameters:
          publishArtifact: true
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
      displayName: MockTest
    - job: MockTestFailureAlert
      variables:
        TASK_KEY: MockTestFailureAlert
        Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
      dependsOn:
      - MockTestJob
      condition: failed('MockTestJob')
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'LiveTest') }}:
  - stage: LiveTest
    dependsOn:
    - setup
    - MockTest
    condition: and(not(contains(stageDependencies.setup.outputs['config.configResource.excludestages'], 'LiveTest')), or(succeeded('MockTest'), contains(stageDependencies.setup.outputs['config.configResource.ignore'], 'TestFailure')))
    jobs:
    - job: LiveTestJob
      variables:
        TASK_KEY: LiveTest
      steps:
      - script: echo 'CLILiveTest'
      - template: .azure-pipelines/templates/BeforeTask.yml
        parameters:
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
          SDK: ${{ variables.SDK }}
      - template: .azure-pipelines/templates/LiveTest.yml
      - template: .azure-pipelines/templates/AfterTask.yml
        parameters:
          publishArtifact: true
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
      displayName: LiveTest
    - job: LiveTestFailureAlert
      variables:
        TASK_KEY: LiveTestFailureAlert
        Contactors: "sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
      dependsOn:
      - LiveTestJob
      condition: failed('LiveTestJob')
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'Submit') }}:
  - stage: Submit
    condition: or(succeeded(), contains('${{ variables.ignore }}', 'TestFailure'))
    jobs:
    - job: submitJob
      variables:
        TASK_KEY: Submit
      steps:
      - template: .azure-pipelines/templates/BeforeTask.yml
        parameters:
          checkout: ${{ eq(variables.CHECK_OUT, 'true') }}
          SDK: ${{ variables.SDK }}
      - bash: |
          echo $(Pipeline.Workspace)
          pwd

          echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
          git clone --branch $(WORKBRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@$(SDK_REPO_URL)
          git config credential.helper store; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot;"
          git branch; git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
        displayName: 'Generate pull request'
    - job: confirm
      dependsOn: submitJob
      condition: succeeded()
      displayName: confirm submit or customize
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - bash: |
          cd $(Pipeline.Workspace)/s
          codePR=$(CODE_PULLREQUEST)

          sdktarget=$(TARGET)

          org=$(SPEC_REPO_OWNER)
          repo=$(SPEC_REPO_NAME)
          base=$(SPEC_REPO_BASE_BRANCH)

          triggerPR="https://github.com/$(CODEGEN_REPO_OWNER)/$(CODEGEN_REPO_NAME)/pull/$(System.PullRequest.PullRequestNumber)"
          submitURL="https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName)/onboard"
          customizeURL="https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName)/customize?triggerPR=$triggerPR&codePR=$codePR"



          python scripts/onboard.py "Onboarding" "$(TARGET) Onboarding $(ResourceProvider) confirm" "$codePR" "$triggerPR" "$submitURL" "$customizeURL" > scripts/email.html
          echo "start of email"
          cat scripts/email.html
          echo "end of email"
          # to_mail="sdkautomationpipeline@outlook.com"
          if [ "$sdktarget" == "terraform" ]; then
            to_mail="tfazengvsc@microsoft.com;sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
          else
            to_mail="AzCLIInternal@microsoft.com;sdkautomationpipeline@outlook.com;vsccodegen@microsoft.com"
          fi
          plateform=$(PLATEFORM)
          echo "plateform: $plateform"
          if [ "$plateform" == "dev" ]; then
            to_mail="sdkautomationpipeline@outlook.com"
          fi

          echo "to_mail: $to_mail"
          echo "cc_mail: $cc_mail"

          sudo pip install wheel
          sudo pip install sendgrid
          python scripts/sendGridemail.py "scripts/email.html" $to_mail "Depth-coverage Onboarding Confirm" $(API_KEY)
          echo "end of send email"

          codePR=$(curl -X PATCH -H "Content-Type: application/json" https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName) -d '{"updateParameters": {"status": "pipelineCompleted"}}')
        displayName: "send confirm email"
- stage: Result
  jobs:
  - job: publishResult
    condition: always()
    steps:
    - bash: |
        codePR=$(curl -X PATCH -H "Content-Type: application/json" https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName) -d '{"updateParameters": {"status": "completed"}}')
      displayName: 'set complete'
