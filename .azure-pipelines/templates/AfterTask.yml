parameters:
- name: subTaskKey
  type: string
  default: ''
- name: publishArtifact
  type: boolean
  default: false
- name: checkout
  type: boolean
  default: false

steps:
# - script: |
#     echo $pwd
#     # tar -czvf $(TARGET)-$(ResourceProvider)-generated.tar.gz generated/$(ResourceProvider)
#     tar -czvf $(TARGET)-$(ResourceProvider)-generated.tar.gz $(Artifact)
#     az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
#     az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f $(TARGET)-$(ResourceProvider)-generated.tar.gz -n $(TARGET)/$(TARGET)-$(ResourceProvider)-generated.tar.gz --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)
#   condition: always()
#   displayName: 'After $(TASK_KEY)'
- bash: |
    cd $(Pipeline.Workspace)/s
    tar -czvf $(CodeGenerationName)-$(Build.BuildId)-generated.tar.gz $(Artifact)
    az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
    az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f $(CodeGenerationName)-$(Build.BuildId)-generated.tar.gz -n $(CodeGenerationName)-$(Build.BuildId)-generated.tar.gz --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)
  condition: ${{ parameters.publishArtifact }}
  displayName: 'publish artifact'
- ${{ if parameters.checkout }}:
  - template: PushCodeToRepo.yml
    parameters:
      sdkRepoName: $(SDK_REPO_NAME)
      branchName: $(WORKBRANCH)
  - template: PushCodeToRepo.yml
    parameters:
      sdkRepoName: $(SPEC_REPO_NAME)
      branchName: $(WORKBRANCH)
- bash: |
    pwd
    ls -l
    tar -czvf $(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY)-log.tar.gz *.log
    az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
    az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f $(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY)-log.tar.gz -n log/$(Build.BuildId)/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY)-log.tar.gz --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)
  condition: always()
  displayName: 'upload log'
- bash: |
    set -x
    npm install -g codegenapp
    pwd
    ls -l
    ls -l /home/vsts/work
    publish-codegen-pipeline-result --codegen=$(CodeGenerationName) --pipelineBuildId=$(Build.BuildId) --task=$(TASK_KEY) --status=completed --result=$(Task_Result) --logfile=$(TASK_KEY).log --pipelineLog=pipe.log
    az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f pipe.log -n log/$(Build.BuildId)/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY)-result.log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)

    # publish result to cosmos db
    sudo apt-get install jq -y
    result=`jq . pipe.log`
    # curl -X POST -H "Content-Type: application/json" https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName)/taskResult -d '{"pipelineBuildId":$(Build.BuildId), "taskResult": '"$result"'}'
    curl -X POST -H "Content-Type: application/json" https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName)/taskResult -d '{"pipelineBuildId":"$(Build.BuildId)", "taskResult": '"$result"'}'

    if [ "$(Task_Result)" != "success" ]; then
      codePR=$(curl -X PATCH -H "Content-Type: application/json" https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName) -d '{"updateParameters": {"status": "completed"}}')

      #upload error log file.
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f $(Pipeline.Workspace)/s/$(TASK_KEY).log -n log/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)
      # exit 1
    fi
  condition: always()
  displayName: 'upload pipeline result'
