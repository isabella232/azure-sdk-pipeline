stages:
- stage: setup
  jobs:
  - job: config
    variables:
      TASK_KEY: config
    steps:
    - bash: |
        codePR=$(curl -X PATCH -H "Content-Type: application/json" https://$(CodegenApp_Server)/codegenerations/$(CodeGenerationName) -d '{"updateParameters": {"status": "in_progress","lastPipelineBuildID": "$(Build.BuildId)"}}')
      displayName: "update status"
    - script: |
        sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
        sudo apt-get install jq -y
      displayName: 'prepare'
    - script: |
        echo $(SDK)
        depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)
        ls -l
        # rp=`jq .RPName $(RESOURCE_MAP_FILE)`
      displayName: 'Get resource config file'
    - pwsh: |
        $jsonfile=$env:RESOURCE_MAP_FILE
        echo $jsonfile
        $data = Get-content $jsonfile | ConvertFrom-Json
        $name=$data.RPName

        $readmefile=$data.readmeFile
        $target=$data.target

        $ignore=$data.ignoreFailures
        $excludeStages=$data.excludeStages
        echo "excludeStages:$excludeStages"

        echo "target: $target"

        $tag=$data.tag;
        echo "tag:$tag"

        $resources=$data.resourcelist;
        echo "resources:$resources"

        $onboardType=$data.onboardType
        echo "onboardType:$onboardType"

        $workbranch="$(CodeGenerationName)"
        echo "workbranch:$workbranch"
        if ($workbranch -eq "" ) {
          $workbranch="$onboardType-$target-$name"
        }
        echo "workbranch:$workbranch"

        Write-Host "##vso[task.setvariable variable=ResourceProvider]$name"
        Write-Host "##vso[task.setvariable variable=README_FILE]$readmefile"
        Write-Host "##vso[task.setvariable variable=TARGET]$target"
        Write-Host "##vso[task.setvariable variable=TAG]$tag"
        Write-Host "##vso[task.setvariable variable=RESOURCES]$resources"
        Write-Host "##vso[task.setvariable variable=OnboardType]$onboardType"
        Write-Host "##vso[task.setvariable variable=WORKBRANCH]$workbranch"
        $af=""
        $packagename=""
        if($target -eq "terraform") {
          # $af="generated/$name $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/vendor/github.com/Azure/azure-sdk-for-go/services/$name"
          $af="$name"
          $packagename=$name
        } elseif ($target -eq "clicore" -Or $target -eq "cli") {
          if($name -eq "compute") {
            $af="azure-cli/src/azure-cli/azure/cli/command_modules/vm azure-cli/src/azure-cli/requirements*.txt azure-cli/doc/sphinx/azhelpgen/doc_source_map.json azure-rest-api-specs/specification/$name/resource-manager/readme.az.md"
            $packagename="vm"
          } else {
            $af="azure-cli/src/azure-cli/azure/cli/command_modules/$name azure-cli/src/azure-cli/requirements*.txt azure-cli/doc/sphinx/azhelpgen/doc_source_map.json azure-rest-api-specs/specification/$name/resource-manager/readme.az.md"
            $packagename=$name
          }
        } elseif ($target -eq "go"){
          $af="$(SDK_REPO_NAME)/sdk/$name/arm$name"
        } elseif ($target -eq "dotnet") {
          $af="$(SDK_REPO_NAME)/sdk/$name/Azure.ResourceManager.*"
        }
        echo "artifat:$af"
        Write-Host "##vso[task.setvariable variable=Artifcact]$af"
        Write-Host "##vso[task.setvariable variable=Package]$packagename"

        # Write-Host "##vso[task.setvariable variable=ignore;isOutput=true]$ignore;TestFailure"
        # Write-Host "##vso[task.setvariable variable=excludestages;isOutput=true]$excludeStages"
        Write-Host "##vso[task.setvariable variable=ignore]$ignore;TestFailure"
        Write-Host "##vso[task.setvariable variable=excludestages]$excludeStages"

        $stages="$(stages)"
        if($excludeStages -ne $null) {
          $stagesArray=$stages.Split(";")
          $excludeArray=$excludeStages.Split(";")
          foreach ($element in $excludeArray) {
            $stagesArray = $stagesArray | Where-Object {$_ -ne $element}
          }
          $stages=$stagesArray -join ";"
        }
        echo "stages:$stages"
        Write-Host "##vso[task.setvariable variable=stages;isOutput=true]$stages"
      name: configResource
      displayName: "Set variable"
    - script: echo $(ResourceProvider)
      displayName: "Get variable"
    - script: |
        mkdir -p $(Pipeline.Workspace)/variables
        echo "$(ResourceProvider)" > $(Pipeline.Workspace)/variables/ResourceProvider
        echo "$(README_FILE)" > $(Pipeline.Workspace)/variables/README_FILE
        echo "$(TARGET)" > $(Pipeline.Workspace)/variables/TARGET
        echo "$(TAG)" > $(Pipeline.Workspace)/variables/TAG
        echo "$(RESOURCES)" > $(Pipeline.Workspace)/variables/RESOURCES
        echo "$(OnboardType)" > $(Pipeline.Workspace)/variables/OnboardType
        echo "$(Artifcact)" > $(Pipeline.Workspace)/variables/Artifact
        echo "$(Package)" > $(Pipeline.Workspace)/variables/Package
        echo "$(WORKBRANCH)" > $(Pipeline.Workspace)/variables/Workbranch
        echo "$(ignore)" > $(Pipeline.Workspace)/variables/ignore

        echo ""
        ls -l $(Pipeline.Workspace)/variables
      displayName: "publish variable"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'variables'
        publishLocation: 'pipeline'
